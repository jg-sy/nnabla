// Copyright 2019,2020,2021 Sony Corporation.
// Copyright 2021 Sony Group Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - src/nbla/api_levels.cpp.tmpl
// - build-tools/code_generator/generate.py

#include <nbla/api_levels.hpp>

namespace nbla {
namespace functions {

<%
api_levels = []
for n in range(1, len(api_level_info) + 1):
  api_level_functions = []
  for key, func_id in api_level_info[n].items():
    func_name, func_args = key.split('_')
    func_args = '' if func_args == "Empty" else func_args
    api_level_functions.append((func_name, func_id, func_args))
  api_levels.append(api_level_functions)
%>

static const ApiLevelFunctions api_level_functions_ = {
% for api_level_functions in api_levels:
  FunctionInfoMap {
% for func_name, func_id, func_args in api_level_functions:
    { "${func_name}", FunctionInfo { static_cast<FunctionId>(${func_id}), "${func_args}" } },
% endfor
  },
% endfor
};

int api_level(void) { return api_level_functions().size(); }

const ApiLevelFunctions& api_level_functions(void) { return api_level_functions_; }

}
}