// Copyright 2018,2019,2020,2021 Sony Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - src/nbla_utils/nnp_impl_get_function_args.cpp.tmpl
// - build-tools/code_generator/generate.py


#include "nnp_impl.hpp"

<%
def get_available_values(arg):
  return ','.join(['"{0}"'.format(v) for v in arg['available_values']])
%>

namespace nbla { namespace utils { namespace nnp {
vector<Network::FunctionArg> NetworkImpl::get_function_args(const ::Function &func) {
    using available_values = vector<string>;

    vector<Network::FunctionArg> arguments;
% for name, func in function_info.items():
% if 'arguments' in func:
    if (func.type() == "${name}") {
% if name == 'SyncBatchNormalization':
        NBLA_ERROR(error_code::not_implemented, "SyncBatchNormalization is not supported.");
        return arguments;
    }
<% continue %>
% endif
        ${name}Parameter param = func.${ func['snake_name'] }_param();
  % for argname, arg in func['arguments'].items() :
    % if arg['type'] == 'string':
        arguments.emplace_back(param.${ argname }(), available_values{ ${get_available_values(arg)} });
    % else:
        arguments.emplace_back(param.${ argname }());
    % endif
  % endfor
        return arguments;
    }
% endif
% endfor

    return arguments;
}
}}}