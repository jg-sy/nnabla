// Copyright 2019,2020,2021 Sony Corporation.
// Copyright 2021 Sony Group Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - include/nbla/api_levels.hpp.tmpl
// - build-tools/code_generator/generate.py

#ifndef __NBLA_API_LEVELS_HPP__
#define __NBLA_API_LEVELS_HPP__

#include <nbla/defs.hpp>

#include <string>
#include <unordered_map>
#include <vector>

namespace nbla {
namespace functions {

typedef enum {
<%
idx = 0
functions = {}
enum_list = []
for n in range(1, len(api_level_info) + 1):
  for key, func_id in api_level_info[n].items():
    func_name, func_args = key.split('_')
    indices = functions.setdefault(func_name, list())
    if indices:
      _index = indices[-1]
      _name, _value, _comment = enum_list[_index]
      new_name = '{0}_{1}'.format(_name, len(indices) - 1)
      enum_list[_index] = (new_name, _value, _comment)

    args = '' if func_args == 'Empty' else ' [{0}]'.format(func_args)
    comment = '///< {0}{1}'.format(func_name, args)
    enum_list.append((func_name.upper(), func_id, comment))
    functions[func_name].append(idx)
    idx += 1

enum_list = sorted(enum_list, key=lambda t: t[0])
%>
% for enum_name, enum_value, comment in enum_list:
  FUNCTION_ID_${enum_name} = ${enum_value},  ${comment}
% endfor
  END_OF_FUNCTION_ID = 65535  // Ensure this type has 16bits
} FunctionId;

typedef struct NBLA_API {
  FunctionId func_id_;
  std::string argument_;
} FunctionInfo;

typedef std::unordered_map<std::string, FunctionInfo> FunctionInfoMap;
typedef std::vector<FunctionInfoMap> ApiLevelFunctions;

NBLA_API int api_level(void);
NBLA_API const ApiLevelFunctions& api_level_functions(void);
}
}

#endif